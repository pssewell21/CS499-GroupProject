/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package starmap;

import java.awt.*;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.TimeZone;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JFileChooser;
import starmap.DataReaders.ConstellationDataReader;
import starmap.DataReaders.ConstellationLineCreator;
import starmap.DataReaders.ConstellationPointDataReader;
import starmap.DataReaders.MessierDataReader;
import starmap.DataReaders.PlanetDataReader;
import starmap.DataReaders.StarDataReader;
import starmap.Objects.Constellation;
import starmap.Objects.ConstellationLine;
import starmap.Objects.ConstellationPoint;
import starmap.Objects.Messier;
import starmap.Objects.Moon;
import starmap.Objects.Planet;
import starmap.Objects.Star;


/**
 * OBJECT: Driver
 * 
 * DESCRIPTION: This object creates the star map based on user inputs in GUI.
 * 
 * DATE: 02-01-2019
 * @author pssew (code) and Dina Brown (code, javadoc comments)
 */
public class Driver extends javax.swing.JFrame {
    
    private ArrayList<Star> starList;
    private ArrayList<Constellation> constellationList;
    private ArrayList<ConstellationPoint> constellationPointList;
    private ArrayList<ConstellationLine> constellationLineList;
    private ArrayList<Planet> planetList;
    private ArrayList<Messier> messierList;
    private Moon moon;
    
    MapPanel mapPanel;    
    
    // boolean flags that control which items are visible on the star map
    private boolean starVisibilityFlag = true;
    private boolean constellationVisibilityFlag = true;
    private boolean planetVisibilityFlag = true;
    private boolean moonVisibilityFlag = true;
    private boolean messierVisibilityFlag = true;
    
    private boolean starLabelVisibilityFlag = true;
    private boolean constellationLabelVisibilityFlag = true;
    private boolean planetLabelVisibilityFlag = true;
    private boolean moonPhaseVisibilityFlag = true;
    private boolean messierLabelVisibilityFlag = true;
    
    private final Color errorBackgroundColor = Color.YELLOW;
    private final Color normalBackgroundColor = Color.WHITE;
    
    // <editor-fold defaultstate="collapsed" desc="Constructor"> 

    /**
     * Creates new form Application
     */
    public Driver() {
        initComponents();
        latitudeButtonGroup.add(northRadioButton);
        latitudeButtonGroup.add(southRadioButton);
        longitudeButtonGroup.add(westRadioButton);
        longitudeButtonGroup.add(eastRadioButton);
        
        // SET DEFAULT VALUES
        
        // UAH Tech Hall coordinates
        westRadioButton.setSelected(true);
        longDegreeTextField.setText("86");
        minLongTextField.setText("38");
        secLongTextField.setText("47");
        
        northRadioButton.setSelected(true);
        latDegreeTextField.setText("34");
        minLatTextField.setText("43");
        secLatTextField.setText("8");       
        
        // Set DateTime fields to current DateTime
        LocalDateTime currentDateTime = LocalDateTime.now();
        Calendar calendar = Calendar.getInstance();
        TimeZone timeZone = calendar.getTimeZone();
        int offset = ((timeZone.getRawOffset() + timeZone.getDSTSavings()) / (1000 * 60 * 60));
                
        dateTextField.setCalendar(calendar);
        hourTextField.setText(Integer.toString(calendar.get(Calendar.HOUR_OF_DAY)));
        hourOffsetComboBox.setSelectedItem(Integer.toString(offset));
        minuteTextField.setText(Integer.toString(calendar.get(Calendar.MINUTE)));        
        
        load();
    }

    //</editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="UI Generated Code and Event Handlers"> 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        latitudeButtonGroup = new javax.swing.ButtonGroup();
        longitudeButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        generateStarMapButton = new javax.swing.JButton();
        coordinatePanel = new javax.swing.JPanel();
        latitudeDegreesLabel = new javax.swing.JLabel();
        latDegreeTextField = new javax.swing.JTextField();
        latitudeMinLabel = new javax.swing.JLabel();
        longDegreeTextField = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        minLatTextField = new javax.swing.JTextField();
        dateTextField = new com.toedter.calendar.JDateChooser();
        secLatTextField = new javax.swing.JTextField();
        secLongTextField = new javax.swing.JTextField();
        minLongTextField = new javax.swing.JTextField();
        northRadioButton = new javax.swing.JRadioButton();
        eastRadioButton = new javax.swing.JRadioButton();
        westRadioButton = new javax.swing.JRadioButton();
        southRadioButton = new javax.swing.JRadioButton();
        degreeLabel = new javax.swing.JLabel();
        hourLabel = new javax.swing.JLabel();
        minuteLabel = new javax.swing.JLabel();
        degreeLabel1 = new javax.swing.JLabel();
        hourLabel1 = new javax.swing.JLabel();
        minuteLabel1 = new javax.swing.JLabel();
        hourTextField = new javax.swing.JTextField();
        minuteTextField = new javax.swing.JTextField();
        hourOffsetComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        objectSelectionPanel = new javax.swing.JPanel();
        starObjectCheckBox = new javax.swing.JCheckBox();
        planetObjectCheckBox = new javax.swing.JCheckBox();
        constellationObjectCheckBox = new javax.swing.JCheckBox();
        moonObjectCheckBox = new javax.swing.JCheckBox();
        messierObjectCheckBox = new javax.swing.JCheckBox();
        saveImageButton = new javax.swing.JButton();
        labelSelectionPanel = new javax.swing.JPanel();
        starLabelCheckBox = new javax.swing.JCheckBox();
        constellationLabelCheckBox = new javax.swing.JCheckBox();
        planetLabelCheckBox = new javax.swing.JCheckBox();
        moonPhaseCheckBox = new javax.swing.JCheckBox();
        messierLabelCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Star Map Generator");

        generateStarMapButton.setBackground(java.awt.Color.green);
        generateStarMapButton.setText("Generate Star Map");
        generateStarMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateStarMapButtonActionPerformed(evt);
            }
        });

        coordinatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Coordinates and Time"));

        latitudeDegreesLabel.setText("Latitude:");

        latDegreeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                latDegreeTextFieldKeyReleased(evt);
            }
        });

        latitudeMinLabel.setText("Longitude:");

        longDegreeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longDegreeTextFieldActionPerformed(evt);
            }
        });
        longDegreeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                longDegreeTextFieldKeyReleased(evt);
            }
        });

        dateLabel.setText("Date/Time:");

        minLatTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minLatTextFieldKeyReleased(evt);
            }
        });

        dateTextField.setMaxSelectableDate(new java.util.Date(4102466399000L));
        dateTextField.setMinSelectableDate(new java.util.Date(-2208967200000L));
        dateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateTextFieldKeyReleased(evt);
            }
        });

        secLatTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                secLatTextFieldKeyReleased(evt);
            }
        });

        secLongTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                secLongTextFieldKeyReleased(evt);
            }
        });

        minLongTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minLongTextFieldActionPerformed(evt);
            }
        });
        minLongTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minLongTextFieldKeyReleased(evt);
            }
        });

        northRadioButton.setText("N");

        eastRadioButton.setText("E");

        westRadioButton.setText("W");
        westRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                westRadioButtonActionPerformed(evt);
            }
        });

        southRadioButton.setText("S");

        degreeLabel.setText("°");

        hourLabel.setText("'");

        minuteLabel.setText("\"");

        degreeLabel1.setText("°");

        hourLabel1.setText("'");

        minuteLabel1.setText("\"");

        hourTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                hourTextFieldKeyReleased(evt);
            }
        });

        minuteTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minuteTextFieldKeyReleased(evt);
            }
        });

        hourOffsetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-12", "-11", "-10", "-9", "-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", "+1", "+2", "+3", "+4", "+5", "+6", "+7", "+8", "+9", "+10", "+11", "+12" }));
        hourOffsetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourOffsetComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("hr");

        jLabel2.setText("min");

        javax.swing.GroupLayout coordinatePanelLayout = new javax.swing.GroupLayout(coordinatePanel);
        coordinatePanel.setLayout(coordinatePanelLayout);
        coordinatePanelLayout.setHorizontalGroup(
            coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coordinatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(latitudeMinLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(latitudeDegreesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(coordinatePanelLayout.createSequentialGroup()
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(longDegreeTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(latDegreeTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(degreeLabel1)
                            .addComponent(degreeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minLongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minLatTextField))
                        .addGap(5, 5, 5)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hourLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hourLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(coordinatePanelLayout.createSequentialGroup()
                                .addComponent(secLatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minuteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coordinatePanelLayout.createSequentialGroup()
                                .addComponent(secLongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minuteLabel1)))
                        .addGap(18, 27, Short.MAX_VALUE)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(northRadioButton)
                            .addComponent(westRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(southRadioButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(eastRadioButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(107, 107, 107))
                    .addGroup(coordinatePanelLayout.createSequentialGroup()
                        .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hourOffsetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        coordinatePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {latitudeDegreesLabel, latitudeMinLabel});

        coordinatePanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {latDegreeTextField, longDegreeTextField, minLatTextField, minLongTextField, secLatTextField, secLongTextField});

        coordinatePanelLayout.setVerticalGroup(
            coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coordinatePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(coordinatePanelLayout.createSequentialGroup()
                            .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(northRadioButton)
                                .addComponent(minLatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hourLabel)
                                .addComponent(southRadioButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(minLongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hourLabel1)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, coordinatePanelLayout.createSequentialGroup()
                            .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(secLatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(minuteLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(secLongTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(minuteLabel1)
                                .addComponent(westRadioButton)
                                .addComponent(eastRadioButton))))
                    .addGroup(coordinatePanelLayout.createSequentialGroup()
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(latDegreeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degreeLabel)
                            .addComponent(latitudeDegreesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(longDegreeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degreeLabel1)
                            .addComponent(latitudeMinLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(coordinatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hourTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(minuteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(hourOffsetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        coordinatePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {latDegreeTextField, longDegreeTextField, minLatTextField, minLongTextField, secLatTextField, secLongTextField});

        coordinatePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {latitudeDegreesLabel, latitudeMinLabel});

        objectSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Object Selection"));

        starObjectCheckBox.setSelected(true);
        starObjectCheckBox.setText("Stars");
        starObjectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starObjectCheckBoxActionPerformed(evt);
            }
        });

        planetObjectCheckBox.setSelected(true);
        planetObjectCheckBox.setText("Major Planets");
        planetObjectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planetObjectCheckBoxActionPerformed(evt);
            }
        });

        constellationObjectCheckBox.setSelected(true);
        constellationObjectCheckBox.setText("Major Constellations");
        constellationObjectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constellationObjectCheckBoxActionPerformed(evt);
            }
        });

        moonObjectCheckBox.setSelected(true);
        moonObjectCheckBox.setText("Moon");
        moonObjectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moonObjectCheckBoxActionPerformed(evt);
            }
        });

        messierObjectCheckBox.setSelected(true);
        messierObjectCheckBox.setText("Messier Objects");
        messierObjectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messierObjectCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout objectSelectionPanelLayout = new javax.swing.GroupLayout(objectSelectionPanel);
        objectSelectionPanel.setLayout(objectSelectionPanelLayout);
        objectSelectionPanelLayout.setHorizontalGroup(
            objectSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(starObjectCheckBox)
                    .addComponent(constellationObjectCheckBox)
                    .addComponent(moonObjectCheckBox)
                    .addComponent(planetObjectCheckBox)
                    .addComponent(messierObjectCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        objectSelectionPanelLayout.setVerticalGroup(
            objectSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectSelectionPanelLayout.createSequentialGroup()
                .addComponent(starObjectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(constellationObjectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(planetObjectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moonObjectCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messierObjectCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveImageButton.setText("Save Image");
        saveImageButton.setEnabled(false);
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        labelSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Label Selection"));

        starLabelCheckBox.setSelected(true);
        starLabelCheckBox.setText("Stars");
        starLabelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starLabelCheckBoxActionPerformed(evt);
            }
        });

        constellationLabelCheckBox.setSelected(true);
        constellationLabelCheckBox.setText("Major Constellations");
        constellationLabelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constellationLabelCheckBoxActionPerformed(evt);
            }
        });

        planetLabelCheckBox.setSelected(true);
        planetLabelCheckBox.setText("Major Planets");
        planetLabelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planetLabelCheckBoxActionPerformed(evt);
            }
        });

        moonPhaseCheckBox.setSelected(true);
        moonPhaseCheckBox.setText("Moon Phase");
        moonPhaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moonPhaseCheckBoxActionPerformed(evt);
            }
        });

        messierLabelCheckBox.setSelected(true);
        messierLabelCheckBox.setText("Messier Objects");
        messierLabelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messierLabelCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout labelSelectionPanelLayout = new javax.swing.GroupLayout(labelSelectionPanel);
        labelSelectionPanel.setLayout(labelSelectionPanelLayout);
        labelSelectionPanelLayout.setHorizontalGroup(
            labelSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(labelSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(starLabelCheckBox)
                    .addComponent(constellationLabelCheckBox)
                    .addComponent(moonPhaseCheckBox)
                    .addComponent(planetLabelCheckBox)
                    .addComponent(messierLabelCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        labelSelectionPanelLayout.setVerticalGroup(
            labelSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labelSelectionPanelLayout.createSequentialGroup()
                .addComponent(starLabelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(constellationLabelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(planetLabelCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moonPhaseCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messierLabelCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(coordinatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(objectSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateStarMapButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(generateStarMapButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveImageButton))
                    .addComponent(objectSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(coordinatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSelectionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        coordinatePanel.getAccessibleContext().setAccessibleName("");
        objectSelectionPanel.getAccessibleContext().setAccessibleName("");
        objectSelectionPanel.getAccessibleContext().setAccessibleDescription("");
        labelSelectionPanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateStarMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateStarMapButtonActionPerformed
        try 
        {
            Calendar selectedDate = dateTextField.getCalendar();
            int hour = Integer.parseInt(hourTextField.getText());
            int hourOffset = Integer.parseInt(hourOffsetComboBox.getSelectedItem().toString());
                        
            int greenwichDay = selectedDate.get(Calendar.DAY_OF_MONTH);
            int greenwichHour = hour - hourOffset;   
            
            if (greenwichHour >= 24)
            {
                greenwichHour -= 24;
                greenwichDay += 1;
            }
            
            int minute = Integer.parseInt(minuteTextField.getText());  
            
            LocalDateTime greenwichDateTime = LocalDateTime.of(
                    selectedDate.get(Calendar.YEAR), 
                    selectedDate.get(Calendar.MONTH) + 1, 
                    greenwichDay, 
                    greenwichHour, 
                    minute);
                           
            int latitudeDegrees = Integer.parseInt(latDegreeTextField.getText());
            int latitudeMinutes = Integer.parseInt(minLatTextField.getText());
            double latitudeSeconds = Double.parseDouble(secLatTextField.getText());
            String latitudeDirection = "";
            
            if (northRadioButton.isSelected())
            {
                latitudeDirection = "North";
            }
            else if (southRadioButton.isSelected())
            {
                latitudeDirection = "South";
            } 
            
            int longitudeDegrees = Integer.parseInt(longDegreeTextField.getText());
            int longitudeMinutes = Integer.parseInt(minLongTextField.getText());
            double longitudeSeconds = Double.parseDouble(secLongTextField.getText());
            String longitudeDirection = "";
            
            if (westRadioButton.isSelected())
            {
                longitudeDirection = "West";
            }
            else if (eastRadioButton.isSelected())
            {
                longitudeDirection = "East";
            }                    
                     
            LocalTime greenwichSiderealTime = Calculation.getGreenwichSiderealTime(greenwichDateTime);            
            
            // Coordinates for UAH are 34° 43' 8.0904'' N, 86° 38' 47.3532'' W   
            double latitude = Calculation.getDecimalCoordinate(latitudeDegrees, latitudeMinutes, latitudeSeconds, latitudeDirection);
            double longitude = Calculation.getDecimalCoordinate(longitudeDegrees, longitudeMinutes, longitudeSeconds, longitudeDirection);
            
            // Calculate azimuth and elevation coordinates from the specified time and location
            for (Star star : starList)
            {
                star.calculateHorizonCoordinates(latitude, longitude, greenwichSiderealTime);
            }
            
            for (Constellation constellation : constellationList)
            {
                constellation.calculateHorizonCoordinates(latitude, longitude, greenwichSiderealTime);
            }
            
            for (ConstellationPoint constellationPoint : constellationPointList)
            {
                constellationPoint.calculateHorizonCoordinates(latitude, longitude, greenwichSiderealTime);
            }   
        
            ConstellationLineCreator constellationLineCreator = new ConstellationLineCreator();
        
            constellationLineList = constellationLineCreator.GetConstellationLineList(constellationPointList);
            
            for (Planet planet : planetList)
            {
                planet.planet_getIntermediateValues(greenwichDateTime);
                planet.calculateHorizonCoordinates(latitude, longitude, greenwichSiderealTime);
            }
            
            for (Messier messier : messierList)
            {
                messier.calculateHorizonCoordinates(latitude, longitude, greenwichSiderealTime);
            }
            // Moon calculations:
            //moon.moon_getIntermediateValues(latitude, longitude, dateTime);
            moon.moon_getIntermediateValues(greenwichDateTime);
            moon.calculateHorizonCoordinates(latitude, longitude, greenwichSiderealTime);
            
            System.out.println("\n" + moon.phase);
            
            // Output positions of objects
//            for (Planet planet : planetList)
//            {
//                System.out.println("Current Azimuth/Elevation of " + planet.name + ": "
//                    + planet.azimuth + "°, " + planet.elevation + "°");
//            }
//
            System.out.println("Current Azimuth/Elevation of " + moon.name + ": "
                + moon.azimuth + "°, " + moon.elevation + "°");

            mapPanel = new MapPanel(starList, 
                    constellationList, 
                    constellationLineList,
                    planetList, 
                    messierList, 
                    moon, 
                    starVisibilityFlag, 
                    starLabelVisibilityFlag, 
                    constellationVisibilityFlag, 
                    constellationLabelVisibilityFlag, 
                    planetVisibilityFlag, 
                    planetLabelVisibilityFlag, 
                    messierVisibilityFlag, 
                    messierLabelVisibilityFlag, 
                    moonVisibilityFlag, 
                    moonPhaseVisibilityFlag);
            JScrollPane mapPanelScrollPane = new JScrollPane(mapPanel);
            
            JPanel mapFramePanel = new JPanel();            
            mapFramePanel.setLayout(new BorderLayout());
            mapFramePanel.add(mapPanelScrollPane);
            
            // Generated Sky Map Image
            JFrame mapFrame = new JFrame("Sky Map");
            mapFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            mapFrame.add(mapFramePanel);
            mapFrame.setSize(1000, 1000);
            
            mapFrame.setVisible(true);            
            
            saveImageButton.setEnabled(true);
            
            
            
            // Unit testing of Calculation.GetJulianDate()
//            double julianDate1 = Calculation.getJulianDate(LocalDateTime.of(2019, 04, 14, 23, 25, 0));
//            System.out.println("julianDate1 = " + julianDate1 + ". Should be 2458588.475694");
//            
//            double julianDate2 = Calculation.getJulianDate(LocalDateTime.of(1999, 04, 14, 23, 25, 0));
//            System.out.println("julianDate2 = " + julianDate2 + ". Should be 2451283.475694");
//            
//            double julianDate3 = Calculation.getJulianDate(LocalDateTime.of(2000, 1, 1, 12, 00, 0));
//            System.out.println("julianDate3 = " + julianDate3 + ". Should be 2451545.000000");
//            
//            double julianDate4 = Calculation.getJulianDate(LocalDateTime.of(2019, 04, 14, 11, 25, 0));
//            System.out.println("julianDate4 = " + julianDate4 + ". Should be 2458587.975694");
//            
//            double julianDate5 = Calculation.getJulianDate(LocalDateTime.of(1999, 04, 14, 11, 25, 0));
//            System.out.println("julianDate5 = " + julianDate5 + ". Should be 2451282.975694");
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(Driver.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateStarMapButtonActionPerformed
    /***************************************************************************
    * METHOD: starsCheckBoxActionPerformed()
    *
    * DESCRIPTION: this method prints a message when the stars check box has
    *               been selected.
    * 
    ***************************************************************************/
    private void starObjectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starObjectCheckBoxActionPerformed
        starVisibilityFlag = starObjectCheckBox.isSelected();
        
        // If we are telling the system not to show this object, also don't show the labels
        if (!starVisibilityFlag)
        {
            starLabelCheckBox.setSelected(false);
            starLabelCheckBox.setEnabled(false);
            starLabelVisibilityFlag = false;
        }         
        else
        {            
            starLabelCheckBox.setEnabled(true);
        } 
    }//GEN-LAST:event_starObjectCheckBoxActionPerformed
    /***************************************************************************
    * METHOD: planetsCheckBoxActionPerformed()
    *
    * DESCRIPTION: this method prints a message when the planets check box has
    *               been selected.
    * 
    ***************************************************************************/
    private void planetObjectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planetObjectCheckBoxActionPerformed
        planetVisibilityFlag = planetObjectCheckBox.isSelected();     
        
        // If we are telling the system not to show this object, also don't show the labels
        if (!planetVisibilityFlag)
        {
            planetLabelCheckBox.setSelected(false);
            planetLabelCheckBox.setEnabled(false);
            planetLabelVisibilityFlag = false;
        }         
        else
        {            
            planetLabelCheckBox.setEnabled(true);
        } 
    }//GEN-LAST:event_planetObjectCheckBoxActionPerformed
    /**************************************************************************
    * METHOD: constellationsCheckBoxActionPerformed()
    *
    * DESCRIPTION: this method prints a message when the constellations check 
    *               box has been selected.
    * 
    ***************************************************************************/
    private void constellationObjectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constellationObjectCheckBoxActionPerformed
        constellationVisibilityFlag = constellationObjectCheckBox.isSelected();
        
        // If we are telling the system not to show this object, also don't show the labels
        if (!constellationVisibilityFlag)
        {
            constellationLabelCheckBox.setSelected(false);
            constellationLabelCheckBox.setEnabled(false);
            constellationLabelVisibilityFlag = false;
        }         
        else
        {            
            constellationLabelCheckBox.setEnabled(true);
        } 
    }//GEN-LAST:event_constellationObjectCheckBoxActionPerformed
    /***************************************************************************
    * METHOD: messierCheckBoxActionPerformed()
    *
    * DESCRIPTION: this method prints a message when the Messier check box has
    *               been selected.
    * 
    ***************************************************************************/
    private void moonObjectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moonObjectCheckBoxActionPerformed
        moonVisibilityFlag = moonObjectCheckBox.isSelected(); 
        
        // If we are telling the system not to show this object, also don't show the labels
        if (!moonVisibilityFlag)
        {
            moonPhaseCheckBox.setSelected(false);
            moonPhaseCheckBox.setEnabled(false);
            moonPhaseVisibilityFlag = false;
        }      
        else
        {            
            moonPhaseCheckBox.setEnabled(true);
        } 
    }//GEN-LAST:event_moonObjectCheckBoxActionPerformed
    /***************************************************************************
    * METHOD: latDegreeTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the latitude degree is invalid.
    * 
    ***************************************************************************/
    private void latDegreeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_latDegreeTextFieldKeyReleased
        // Gets the Longitude Degree value from user:
        try
        {
            int latDegree = Integer.parseInt(latDegreeTextField.getText());

            if((latDegree < 0) || (latDegree > 90))
            {
                latDegreeTextField.setBackground(errorBackgroundColor);
            }
            else
            {
                latDegreeTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            latDegreeTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_latDegreeTextFieldKeyReleased
    /***************************************************************************
    * METHOD: minLatTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the latitude degree is invalid.
    * 
    ***************************************************************************/
    private void minLatTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minLatTextFieldKeyReleased
        // Gets the Latitude Hours value from user:
        try
        {
            int latHours = Integer.parseInt(minLatTextField.getText());

            if((latHours < 0) || (latHours > 59))
            {
                minLatTextField.setBackground(errorBackgroundColor);
            }          
            else
            {
                minLatTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            minLatTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_minLatTextFieldKeyReleased
    /***************************************************************************
    * METHOD: secLatTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the latitude second is invalid.
    * 
    ***************************************************************************/
    private void secLatTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secLatTextFieldKeyReleased
        try
        {
            double latSeconds = Double.parseDouble(secLatTextField.getText());
        
            if((latSeconds < 0) || (latSeconds >= 60))
            {
                secLatTextField.setBackground(errorBackgroundColor);
            }          
            else
            {
                secLatTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            secLatTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_secLatTextFieldKeyReleased
    /***************************************************************************
    * METHOD: longDegreeTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the longitude degree is invalid.
    * 
    ***************************************************************************/
    private void longDegreeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_longDegreeTextFieldKeyReleased
        // Gets the Longitude Degree value from user:
        try
        {
            int longDegree = Integer.parseInt(longDegreeTextField.getText());
        
            if((longDegree < 0) || (longDegree > 180))
            {
                longDegreeTextField.setBackground(errorBackgroundColor);
            }
            else
            {
                longDegreeTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            longDegreeTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_longDegreeTextFieldKeyReleased
   /***************************************************************************
    * METHOD: minLongTextFieldKeyReleased
    *
    * DESCRIPTION: sets the text field to YELLOW if the longitude degree is invalid.
    * 
    ***************************************************************************/
    private void minLongTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minLongTextFieldKeyReleased
        try
        { 
            int longMinutes = Integer.parseInt(minLongTextField.getText());
        
            if((longMinutes < 0) || (longMinutes > 59))
            {
                minLongTextField.setBackground(errorBackgroundColor);
            }          
            else
            {
                minLongTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            minLongTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_minLongTextFieldKeyReleased
   /***************************************************************************
    * METHOD: secLongTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the longitude second is invalid.
    * 
    ***************************************************************************/
    private void secLongTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secLongTextFieldKeyReleased
        try
        {  
            double latMinutes = Double.parseDouble(secLongTextField.getText());
        
            if((latMinutes < 0) || (latMinutes >= 60))
            {
                secLongTextField.setBackground(errorBackgroundColor);
            }          
            else
            {
                secLongTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            secLongTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_secLongTextFieldKeyReleased
   /***************************************************************************
    * METHOD: hourTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the input hour is invalid.
    * 
    ***************************************************************************/
    private void hourTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hourTextFieldKeyReleased
        try
        {
            int hour = Integer.parseInt(hourTextField.getText());
        
            if((hour < 0) || (hour > 23))
            {
                hourTextField.setBackground(errorBackgroundColor);
            }          
            else
            {
                hourTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            hourTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_hourTextFieldKeyReleased
   /***************************************************************************
    * METHOD: minuteTextFieldKeyReleased()
    *
    * DESCRIPTION: sets the text field to YELLOW if the input minute is invalid.
    * 
    ***************************************************************************/
    private void minuteTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minuteTextFieldKeyReleased
        try
        {            
            int minute = Integer.parseInt(minuteTextField.getText());

            if((minute < 0) || (minute > 59))
            {
                minuteTextField.setBackground(errorBackgroundColor);
            }          
            else
            {
                minuteTextField.setBackground(normalBackgroundColor);
            }
        }
        catch (NumberFormatException e)
        {
            minuteTextField.setBackground(errorBackgroundColor);
        }
        
        setGenerateStarMapButtonIsEnabled();
    }//GEN-LAST:event_minuteTextFieldKeyReleased
   /***************************************************************************
    * METHOD: messierObjectCheckBoxActionPerformed()
    *
    * DESCRIPTION: when the check box is not selected for Messier object, both
    *               the object and labels are hidden.
    * 
    ***************************************************************************/
    private void messierObjectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messierObjectCheckBoxActionPerformed
        messierVisibilityFlag = messierObjectCheckBox.isSelected();
        
        // If we are telling the system not to show this object, also don't show the labels
        if (!messierVisibilityFlag)
        {
            messierLabelCheckBox.setSelected(false);
            messierLabelCheckBox.setEnabled(false);
            messierLabelVisibilityFlag = false;
        }
        else
        {            
            messierLabelCheckBox.setEnabled(true);
        }
    }//GEN-LAST:event_messierObjectCheckBoxActionPerformed
   /***************************************************************************
    * METHOD: starLabelCheckBoxActionPerformed()
    *
    * DESCRIPTION: displays star labels on map.
    * 
    ***************************************************************************/
    private void starLabelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starLabelCheckBoxActionPerformed
        starLabelVisibilityFlag = starLabelCheckBox.isSelected();
    }//GEN-LAST:event_starLabelCheckBoxActionPerformed
   /***************************************************************************
    * METHOD: constellationLabelCheckBoxActionPerformed()
    *
    * DESCRIPTION: displays constellations labels on map.
    * 
    ***************************************************************************/
    private void constellationLabelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constellationLabelCheckBoxActionPerformed
        constellationLabelVisibilityFlag = constellationLabelCheckBox.isSelected();
    }//GEN-LAST:event_constellationLabelCheckBoxActionPerformed
   /***************************************************************************
    * METHOD: planetLabelCheckBoxActionPerformed()
    *
    * DESCRIPTION: displays planet labels on map.
    * 
    ***************************************************************************/
    private void planetLabelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planetLabelCheckBoxActionPerformed
        planetLabelVisibilityFlag = planetLabelCheckBox.isSelected();
    }//GEN-LAST:event_planetLabelCheckBoxActionPerformed
   /***************************************************************************
    * METHOD: moonPhaseCheckBoxActionPerformed()
    *
    * DESCRIPTION: displays moon phases label on map.
    * 
    ***************************************************************************/
    private void moonPhaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moonPhaseCheckBoxActionPerformed
        moonPhaseVisibilityFlag = moonPhaseCheckBox.isSelected();
    }//GEN-LAST:event_moonPhaseCheckBoxActionPerformed
   /***************************************************************************
    * METHOD: messierLabelCheckBoxActionPerformed()
    *
    * DESCRIPTION: displays Messier labels on map.
    * 
    ***************************************************************************/
    private void messierLabelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messierLabelCheckBoxActionPerformed
        messierLabelVisibilityFlag = messierLabelCheckBox.isSelected();
    }//GEN-LAST:event_messierLabelCheckBoxActionPerformed
   /***************************************************************************
    * METHOD: saveImageButtonActionPerformed()
    *
    * DESCRIPTION: When an image is generated by user. The user then has an option
    *               to save that image by selecting the save image button.
    * 
    ***************************************************************************/
    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        try
        {
            BufferedImage image = new BufferedImage(mapPanel.getWidth(), mapPanel.getHeight(), BufferedImage.TYPE_INT_RGB);

            Graphics2D graphics2D = image.createGraphics();
            mapPanel.paint(graphics2D);                

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new java.io.File("."));
            fileChooser.setDialogTitle("File Dialog");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) 
            { 
                System.out.println("\n\ngetCurrentDirectory(): " 
                    +  fileChooser.getCurrentDirectory());
                System.out.println("getSelectedFile() : " 
                    +  fileChooser.getSelectedFile());

                File saveImage = new File(fileChooser.getSelectedFile() + ".jpeg");
                ImageIO.write(image, "jpeg", saveImage);
                System.out.println("File written Successfully");
            }
            else 
            {
                System.out.println("No Selection ");
            }  
        }
        catch(HeadlessException | IOException e)
        {
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void longDegreeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longDegreeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longDegreeTextFieldActionPerformed

    private void minLongTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minLongTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minLongTextFieldActionPerformed

    private void hourOffsetComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourOffsetComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourOffsetComboBoxActionPerformed

    private void dateTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateTextFieldKeyReleased
        
    }//GEN-LAST:event_dateTextFieldKeyReleased

    private void westRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_westRadioButtonActionPerformed
    
    // </editor-fold>
        
    /**
     * MAIN
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Driver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> 
        {
            new Driver().setVisible(true);
        });
    } // End main()
    
    /***************************************************************************
    * METHOD: load()
    *
    * DESCRIPTION: 
    * 
    ***************************************************************************/
    private void load()
    {        
        Runnable r = () -> 
        {
            readData();
        };
        
        ExecutorService executor = Executors.newCachedThreadPool();
        executor.submit(r);
    } // End load()
    
    /***************************************************************************
    * METHOD: readData()
    *
    * DESCRIPTION: This method reads all of the provided data for each object.
    * 
    ***************************************************************************/
    private void readData()
    {
        System.out.println("Reading data from file");
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        StarDataReader starDataReader = new StarDataReader();
        
        starList = starDataReader.readData();
        
        ConstellationDataReader constellationDataReader = new ConstellationDataReader();
        
        constellationList = constellationDataReader.readData();
        
        ConstellationPointDataReader constellationPointDataReader = new ConstellationPointDataReader();
        
        constellationPointList = constellationPointDataReader.readData();
        
        PlanetDataReader planetDataReader = new PlanetDataReader();
        
        planetList = planetDataReader.readData();
        
        MessierDataReader messierDataReader = new MessierDataReader();
        
        messierList = messierDataReader.readData();
        
        moon = new Moon();
        
        this.setCursor(Cursor.getDefaultCursor());        
    } // End readData()
    
    /***************************************************************************
    * METHOD: setGenerateStarMapButtonIsEnabled()
    *
    * DESCRIPTION: ??
    * 
    ***************************************************************************/
    void setGenerateStarMapButtonIsEnabled()
    {
        if (latDegreeTextField.getBackground() == errorBackgroundColor
                || minLatTextField.getBackground() == errorBackgroundColor
                || secLatTextField.getBackground() == errorBackgroundColor
                || longDegreeTextField.getBackground() == errorBackgroundColor
                || minLongTextField.getBackground() == errorBackgroundColor
                || secLongTextField.getBackground() == errorBackgroundColor
                || hourTextField.getBackground() == errorBackgroundColor
                || minuteTextField.getBackground() == errorBackgroundColor)
        {
            generateStarMapButton.setEnabled(false);
        }
        else
        {
            generateStarMapButton.setEnabled(true);
        }
    } // End setGenerateStarMapButtonIsEnabled()
    
    // <editor-fold defaultstate="collapsed" desc="Generated Members">

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox constellationLabelCheckBox;
    private javax.swing.JCheckBox constellationObjectCheckBox;
    private javax.swing.JPanel coordinatePanel;
    private javax.swing.JLabel dateLabel;
    private com.toedter.calendar.JDateChooser dateTextField;
    private javax.swing.JLabel degreeLabel;
    private javax.swing.JLabel degreeLabel1;
    private javax.swing.JRadioButton eastRadioButton;
    private javax.swing.JButton generateStarMapButton;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JLabel hourLabel1;
    private javax.swing.JComboBox<String> hourOffsetComboBox;
    private javax.swing.JTextField hourTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel labelSelectionPanel;
    private javax.swing.JTextField latDegreeTextField;
    private javax.swing.ButtonGroup latitudeButtonGroup;
    private javax.swing.JLabel latitudeDegreesLabel;
    private javax.swing.JLabel latitudeMinLabel;
    private javax.swing.JTextField longDegreeTextField;
    private javax.swing.ButtonGroup longitudeButtonGroup;
    private javax.swing.JCheckBox messierLabelCheckBox;
    private javax.swing.JCheckBox messierObjectCheckBox;
    private javax.swing.JTextField minLatTextField;
    private javax.swing.JTextField minLongTextField;
    private javax.swing.JLabel minuteLabel;
    private javax.swing.JLabel minuteLabel1;
    private javax.swing.JTextField minuteTextField;
    private javax.swing.JCheckBox moonObjectCheckBox;
    private javax.swing.JCheckBox moonPhaseCheckBox;
    private javax.swing.JRadioButton northRadioButton;
    private javax.swing.JPanel objectSelectionPanel;
    private javax.swing.JCheckBox planetLabelCheckBox;
    private javax.swing.JCheckBox planetObjectCheckBox;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JTextField secLatTextField;
    private javax.swing.JTextField secLongTextField;
    private javax.swing.JRadioButton southRadioButton;
    private javax.swing.JCheckBox starLabelCheckBox;
    private javax.swing.JCheckBox starObjectCheckBox;
    private javax.swing.JRadioButton westRadioButton;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>

}
